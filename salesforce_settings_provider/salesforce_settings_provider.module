<?php

require_once 'forms/admin.inc';

/**
 * Implement hook_menu().
 */
function salesforce_settings_provider_menu() {
    $items = [];

    return $items;
}

/**
 * Implements hook_permission
 * @return array
 */
function salesforce_settings_provider_permission() {
    $permission = [];
    return $permission;
}

function salesforce_settings_provider__user_access($args) {
    return true;
}

/**
 * Implements hook_library
 * @return array
 */
function salesforce_settings_provider_library() {
    $libraries = array();

    return $libraries;
}

/**
 * Returns the connection settings with which to connect to salesforce.
 * @return \stdClass
 */
function salesforce_settings_provider__get_settings() {
    $s = new stdClass();
    $s->URL = variable_get('SALESFORCE_SETTINGS_ENDPOINT_URL');
    $s->Username = variable_get('SALESFORCE_SETTINGS_USERNAME');
    $s->Password = variable_get('SALESFORCE_SETTINGS_PASSWORD');
    $s->GrantType = variable_get('SALESFORCE_SETTINGS_GRANT_TYPE');
    $s->ClientID = variable_get('SALESFORCE_SETTINGS_CLIENT_ID');
    $s->ClientSecret = variable_get('SALESFORCE_SETTINGS_CLIENT_SECRET');
    return $s;
}

/**
 * Returns the full definition of an entity or the definition of the specified component.
 * Components include: fields, internal_name
 * @param string $entity_name
 * @param string $component
 * @return array
 */
function salesforce_settings_provider__get_entity_definition($entity_name, $component = NULL) {
    $entities = [
        'customer_product' => [
            'internal_name' => 'Customer_Products__c',
            'fields' => [
                'Name' => [
                    'preferred_name' => 'Name',
                    'type' => 'string'
                ],
                'LastModifiedDate' => [
                    'preferred_name' => 'Modified',
                    'type' => 'datetime'
                ],
                'CreatedDate' => [
                    'preferred_name' => 'Created',
                    'type' => 'datetime'
                ],
                'Auxiliary_Circuit_ID__c' => [
                    'preferred_name' => 'AuxiliaryCircuitID',
                    'type' => 'string'
                ],
                'Id' => [
                    'preferred_name' => 'Id',
                    'type' => 'string'
                ],
                'Account__c' => [
                    'preferred_name' => 'Account',
                    'type' => 'string',
                    'lookup_entity' => 'account'
                ],
                'Opportunity__c' => [
                    'preferred_name' => 'Opportunity',
                    'type' => 'string',
                    'lookup_entity' => 'opportunity'
                ],
            ]
        ],
        'account' => [
            'internal_name' => 'Account',
            'fields' => [
                'Industry' => [
                    'preferred_name' => 'Industry',
                    'type' => 'string'
                ],
                'Name' => [
                    'preferred_name' => 'Name',
                    'type' => 'string'
                ],
                'LastModifiedDate' => [
                    'preferred_name' => 'Modified',
                    'type' => 'datetime'
                ],
                'CreatedDate' => [
                    'preferred_name' => 'Created',
                    'type' => 'datetime'
                ],
                'Auxiliary_Circuit_ID__c' => [
                    'preferred_name' => 'AuxiliaryCircuitID',
                    'type' => 'string'
                ],
                'Id' => [
                    'preferred_name' => 'Id',
                    'type' => 'string'
                ],
                'Customer_Rating__c' => [
                    'preferred_name' => 'Rating',
                    'type' => 'string'
                ],
                'GCID__c' => [
                    'preferred_name' => 'GCID',
                    'type' => 'string',
                ],
                'OwnershipId' => [
                    'preferred_name' => 'Ownership',
                    'type' => 'string',
                ],
                'Description' => [
                    'preferred_name' => 'Description',
                    'type' => 'string',
                ],
                'Currency__c' => [
                    'preferred_name' => 'Currency',
                    'type' => 'string',
                ],
            ]
        ],
        'opportunity' => [
            'internal_name' => 'Opportunity',
            'fields' => [
                'Name' => [
                    'preferred_name' => 'Name',
                    'type' => 'string'
                ],
                'LastModifiedDate' => [
                    'preferred_name' => 'Modified',
                    'type' => 'datetime'
                ],
                'CreatedDate' => [
                    'preferred_name' => 'Created',
                    'type' => 'datetime'
                ],
                'Auxiliary_Circuit_ID__c' => [
                    'preferred_name' => 'AuxiliaryCircuitID',
                    'type' => 'string'
                ],
                'Id' => [
                    'preferred_name' => 'Id',
                    'type' => 'string'
                ],
                'AccountId' => [
                    'preferred_name' => 'Account',
                    'type' => 'string',
                    'lookup_entity' => 'account'
                ],
            ],
        ],
    ];
    if ($component) {
        return $entities[$entity_name][$component];
    } else {
        return $entities[$entity_name];
    }
}

/**
 * Returns an array of the specified $entity_name fields in a key value pair of internal_name => display_name.
 * The position is flipped if $forward is set to FALSE.
 * @param string $entity_name
 * @param boolean $forward
 * @return array
 */
function salesforce_settings_provider__get_entity_field_name_map($entity_name, $forward = TRUE, array &$field_type = []) {
    $selected_entity = salesforce_settings_provider__get_entity_definition($entity_name, 'fields');
    $map = [];

    if ($forward) {
        array_walk($selected_entity, function($value, $key) use(&$map, &$field_type) {
            $map[$key] = $value['preferred_name'];
            $field_type[$key] = $value;
        });
    } else {
        array_walk($selected_entity, function($value, $key) use(&$map, &$field_type) {
            $map[$value['preferred_name']] = $key;
            $field_type[$value['preferred_name']] = $value;
        });
    }
    
    return $map;
}

/**
 * Returns the name internal name of the specified $entity_name's field $preferred_name.
 * @param string $entity_name
 * @param string $preferred_name
 * @return string
 */
function salesforce_settings_provider__get_entity_field_internal_name($entity_name, $preferred_name) {
    $selected_entity = salesforce_settings_provider__get_entity_definition($entity_name, 'fields');
    $map = NULL;
    foreach ($selected_entity as $key => $value) {
        if ($value['preferred_name'] == $preferred_name) {
            $map = $key;
            break;
        }
    };

    return $map;
}

/**
 * Returns the name of the entity that an entity field is looking into.
 * @param string $entity_name
 * @param string $field_name
 * @return string
 */
function salesforce_settings_provider__get_entity_field_internal_lookup_name($entity_name, $field_name) {
    $selected_entity = salesforce_settings_provider__get_entity_definition($entity_name, 'fields');
    $internal_name = salesforce_settings_provider__get_entity_field_internal_name($entity_name, $field_name);
    $lookup_entity = $selected_entity[$internal_name]['lookup_entity'];
    return $lookup_entity;
}

/**
 * Returns the compulsary fields of the specified $entity_name. This fields will always be returned
 * when the entity is query, even if they are not selected.
 * @param string $entity_name
 * @return array
 */
function salesforce_settings_provider__get_compulsary_entity_fields($entity_name) {
    $x = [
        'customer_product' => ['Id', 'Account', 'Name'],
        'opportunity' => ['Id', 'Account', 'Name'],
        'account' => ['Id', 'GCID', 'Name']
    ];

    return $x[$entity_name];
}

/**
 * Returns the internal name of the specified salesforce entity.
 * @param string $entity_display_name
 * @return string
 */
function salesforce_settings_provider__get_entity_internal_name($entity_display_name) {
    return salesforce_settings_provider__get_entity_definition($entity_display_name, 'internal_name');
}

/**
 * Renames the fields of the specified entity item.
 * @param stdClass $entity
 */
function salesforce_settings_provider__alter_entity_record_field_names($entity_name, stdClass &$entity) {
    $info = [];
    $direction = TRUE;
    $field_names = salesforce_settings_provider__get_entity_field_name_map($entity_name, $direction, $info);
    salesforce_settings_provider__rename_returned_object_fields($entity, $field_names, $info);
}

/**
 * Substitutes the content of the $selected_fields array with values of corresponding keys in the $field_names array.
 * Should be used to process field select arrays.
 * @param array $selected_fields
 * @param array $field_names
 * @return array
 */
function salesforce_settings_provider__rename_select_fields(array &$selected_fields, array $field_names = []) {
    $substitues = [];

    foreach ($selected_fields as $key) {
        if (array_key_exists($key, $field_names)) {
            $substitues[] = $field_names[$key];
        }
    }

    $selected_fields = $substitues;
    return $selected_fields;
}

/**
 * Renames the keys of the supplied object with the values of the corresponding keys in the $field_names array.
 * @param stdClass $entity_record
 * @param array $field_names
 */
function salesforce_settings_provider__rename_returned_object_fields(stdClass &$entity_record, array $field_names=[], array $info = []) {

    foreach ($field_names as $key => $substitute) {
        if (property_exists($entity_record, $key) && $key !== $substitute) {
            $field_value = $entity_record->{$key};
            
            if (isset($info[$key]) && $info[$key]['type'] == 'datetime' && is_string($entity_record->{$key})) {
                $field_value = substr($entity_record->{$key}, 0, 19);
            }

            $entity_record->{$substitute} = $field_value; //$entity_record->{$key};
            unset($entity_record->{$key});
        }
    }
}

/**
 * Implements hook_salesforce_customer_product_field_name_alter
 * @param stdClass $entity
 */
function salesforce_settings_provider__rename_entity_select_field_names($entity_name, array &$selected_fields) {
    $field_names = salesforce_settings_provider__get_entity_field_name_map($entity_name, FALSE);
    salesforce_settings_provider__rename_select_fields($selected_fields, $field_names);
    return $selected_fields;
}

/**
 * Helps to retrieve the lastest Salesforce request token.
 * @return type
 */
function mware_customer_get_request_token() {
    return salesforce_settings_provider__get_request_token();
}

/**
 * Helps to retrieve the lastest Salesforce request token.
 * @return type
 */
function salesforce_settings_provider__get_request_token() {
    try {
        $sf_settings = salesforce_settings_provider__get_settings();
        $uri = $sf_settings->URL;
        $query_array = [
            'grant_type' => $sf_settings->GrantType,
            'client_id' => $sf_settings->ClientID,
            'client_secret' => $sf_settings->ClientSecret,
            'username' => $sf_settings->Username,
            'password' => $sf_settings->Password
        ];

        // Guzzle is having problems guzzling this request so we are defaulting to traditional cURL
        $query_string = (drupal_http_build_query($query_array));

        $tokenOption = array(
            CURLOPT_HTTPHEADER => array('Content-Type: application/x-www-form-urlencoded'),
            CURLOPT_PROTOCOLS => CURLPROTO_HTTPS,
            CURLOPT_SSL_VERIFYPEER => 0,
            CURLOPT_SSL_VERIFYHOST => 0,
            CURLOPT_POSTFIELDS => $query_string
        );

        $feed = mware_blocking_http_request($uri, ['options' => $tokenOption, 'block' => true]);
        $token_response = json_decode($feed->getContent());
        return $token_response;
    } catch (Exception $x) {
        return FALSE;
    }
}

/**
 * Convert OData $filter syntax into SOQL/SQL syntax
 * @param string $return The OData filter string.
 * @return string
 */
function salesforce_settings_provider__process_filter_expression($filter, $fields) {
    $field_selector = '[\\w][\\w\\d\\_]+';
    $value_selector = '[\\w\\d\\.\\s]+';
    $in_value_selector = '[\\w\\d\\.\\s\\,\']+';
    $int_value_selector = '[\\d]+';
    $datetime_value_selector_0 = '(([\\d]{4})\\-([\\d]{2})\\-([\\d]{2})(\\T([\\d]{2})\\:([\\d]{2})(\\:([\\d]{2}))?)?)';
    $datetime_value_selector_1 = '(([\\d]{4})\\-([\\d]{2})\\-([\\d]{2})(\\T([\\d]{2})\\:([\\d]{2})))';
    $datetime_value_selector_2 = '([\\d]{4})\\-([\\d]{2})\\-([\\d]{2})';

    $fix_date = function($date) use($field_selector, $datetime_value_selector_0, $datetime_value_selector_1, $datetime_value_selector_2) {

        return preg_replace([
            '/(' . $field_selector . ')[\s]+([><=]+)[\s]+(' . $datetime_value_selector_1 . ')Z/',
            '/(' . $field_selector . ')[\s]+([><=]+)[\s]+(' . $datetime_value_selector_2 . ')Z/'
                ], [
            '${1} ${2} ${3}:00Z',
            '${1} ${2} ${3}T00:00:00Z'
                ], $date);
    };

    $return = $filter;
    $pr = [
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(eq)[\s]+(datetime([\'])' . $datetime_value_selector_0 . '(\\4))/',
            'replacement' => '${1} = ${5}Z',
            'field_name' => 1,
            'is_date' => TRUE
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(lt)[\s]+(datetime([\'])' . $datetime_value_selector_0 . '(\\4))/',
            'replacement' => '${1} < ${5}Z',
            'field_name' => 1,
            'is_date' => TRUE
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(gt)[\s]+(datetime([\'])' . $datetime_value_selector_0 . '(\\4))/',
            'replacement' => '${1} > ${5}Z',
            'field_name' => 1,
            'is_date' => TRUE
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(le)[\s]+(datetime([\'])' . $datetime_value_selector_0 . '(\\4))/',
            'replacement' => '${1} <= ${5}Z',
            'field_name' => 1,
            'is_date' => TRUE
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(ge)[\s]+(datetime([\'])' . $datetime_value_selector_0 . '(\\4))/',
            'replacement' => '${1} >= ${5}Z',
            'field_name' => 1,
            'is_date' => TRUE
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(eq)[\s]+(([\'|\"])(' . $value_selector . ')(\\4))/',
            'replacement' => '${1} = ${3}',
            'type' => 'comparison'
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(lt)[\s]+(' . $int_value_selector . ')/',
            'replacement' => '${1} < ${3}',
            'field_name' => 1,
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(le)[\s]+(' . $int_value_selector . ')/',
            'replacement' => '${1} <= ${3}',
            'field_name' => 1,
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(gt)[\s]+(' . $int_value_selector . ')/',
            'replacement' => '${1}>${3}',
            'field_name' => 1,
        ],
        [
            'pattern' => '/(' . $field_selector . ')[\s]+(ge)[\s]+(' . $int_value_selector . ')/',
            'replacement' => '${1} >= ${3}',
            'field_name' => 1,
        ],
        [
            'pattern' => '/(substringof\\()\s*(' . $field_selector . ')\s*,(\'|")(' . $value_selector . ')(\\3)\s*(\\))/',
            'replacement' => '${2} LIKE \'%${4}%\'',
            'field_name' => 2,
        ],
        [
            'pattern' => '/(startswith\\()\s*(' . $field_selector . ')\s*,(\'|")(' . $value_selector . ')(\\3)\s*(\\))/',
            'replacement' => '${2} LIKE \'${4}%\'',
            'field_name' => 2,
        ],
        [
            'pattern' => '/(endswith\\()\s*(' . $field_selector . ')\s*,(\'|")(' . $value_selector . ')(\\3)\s*(\\))/',
            'replacement' => '${2} LIKE \'%${4}\'',
            'field_name' => 2,
        ],
        [
            'pattern' => '/(' . $field_selector . ')\*(in\\()\s*(' . $in_value_selector . ')\s*(\\))/',
            'replacement' => '${1} IN (${3})',
            'field_name' => 2,
        ],
    ];

    foreach ($pr as $p) {

        //get the field name in the expression.
        $mats = [];
        preg_match($p['pattern'], $return, $mats);
        $f = isset($mats[$p['field_name']]) ? $mats[$p['field_name']] : '';

        if (strlen($f) > 0) {
            //get the mapped name of the field
            $w = [$mats[$p['field_name']]];
            salesforce_settings_provider__rename_select_fields($w, $fields);
            $r = $w[0];

            $return = str_replace($f, $r, $return);
            $return = preg_replace($p['pattern'], $p['replacement'], $return);

            //fix date fields.
            if (isset($p['is_date'])) {
                $return = $fix_date($return);
            }
        }
    }

    return $return;
}

/**
 * Queries salesforce for items items that match the specified critery in the specified salesforce entity $entity_name
 * @param string $entity_name
 * @param array $params
 * @param stdClass $token_response
 * @return boolean
 */
function salesforce_settings_provider__get_salesforce_entity_items($entity_name, array $params = [], stdClass &$token_response = NULL, $keyed = NULL, array $notable_fields = [], $post_process = NULL) {
    try {
        //Get the request token
        if (($token_response = (!is_null($token_response) ? $token_response : salesforce_settings_provider__get_request_token()))) {

            // Prepare the fields that will be selected
            $fields = [];
            if (isset($params['$select'])) {
                $fields = is_array($params['$select']) ? $params['$select'] : explode(',', str_replace(' ', '', $params['$select']));
            }

            // compulsarily set the compulsary fields of the entity
            $required_fields = salesforce_settings_provider__get_compulsary_entity_fields($entity_name);
            foreach ($required_fields as $required_field) {
                if (!in_array($required_field, $fields)) {
                    $fields[] = $required_field;
                }
            }

            // translate the selected field names to the internal names, also removes invalid fields
            salesforce_settings_provider__rename_entity_select_field_names($entity_name, $fields);

            // Prepare the filter that will be used
            $filter = isset($params['$filter']) ? $params['$filter'] : '';
            $filter = salesforce_settings_provider__process_filter_expression($filter, salesforce_settings_provider__get_entity_field_name_map($entity_name, FALSE));
            $filter = strlen($filter) > 0 ? 'WHERE ' . $filter : '';

            // Prepare the limit
            $limit = isset($params['$top']) ? ' LIMIT ' . $params['$top'] : '';
            $limit = (strlen($filter) < 1) && (strlen($limit) < 1) ? ' LIMIT 10' : $limit;

            // Prepare the POST request
            $options = array(
                CURLOPT_HTTPHEADER => array(
                    'Authorization: Bearer ' . $token_response->access_token
                ),
                CURLOPT_PROTOCOLS => CURLPROTO_HTTPS,
                CURLOPT_SSL_VERIFYPEER => 0,
                CURLOPT_SSL_VERIFYHOST => 0
            );

            // Generate the SOQL query to send in the POST request
            $selected_fields = implode(',', $fields);
            $entity_internal_name = salesforce_settings_provider__get_entity_internal_name($entity_name);
            $query_url = drupal_http_build_query(['q' => 'SELECT ' . $selected_fields
                . ' FROM ' . $entity_internal_name . ' '
                . $filter
                . $limit]);

            // Execute the POST request.
            $new_url = $token_response->instance_url . '/services/data/v35.0/query?' . $query_url;
            $feed = mware_blocking_http_request($new_url, ['options' => $options]);

            // Process the request
            $res = json_decode($feed->getContent());
            $res_records = [];
            if (isset($res->records)) {
                $expanded_field_values = [];

                foreach ($notable_fields as $notable_field) {
                    $expanded_field_values[$notable_field] = [];
                }

                $expanded_fields = [];
                if (isset($params['$expand'])) {
                    $expanded_field_names = is_array($params['$expand']) ? $params['$expand'] : explode(',', str_replace(' ', '', $params['$expand']));
                    foreach ($expanded_field_names as $expanded_field_name) {
                        if (!in_array($expanded_field_name, $notable_fields)) {
                            $notable_fields[] = $expanded_field_name;
                        }

                        $expanded_field_values[$expanded_field_name] = [];
                        $x = [];
                        $glued_select = is_array($params['$select']) ? implode(',', $params['$select']) : $params['$select'];

                        preg_match_all('/(' . $expanded_field_name . ')\/([\\w]+)/', $glued_select, $x);
                        foreach ($x[2] as $sub_field_name) {
                            $expanded_fields[$expanded_field_name][] = $sub_field_name;
                        }

                        if (!isset($expanded_fields[$expanded_field_name])) {
                            $expanded_fields[$expanded_field_name] = [];
                        }
                    }
                }

                array_walk($res->records, function(&$record) use($keyed, &$expanded_field_values, $entity_name, $notable_fields, &$res_records) {
                    unset($record->attributes);
                    salesforce_settings_provider__alter_entity_record_field_names($entity_name, $record);
                    foreach ($notable_fields as $notable_field) {
                        $expanded_field_values[$notable_field][] = $record->{$notable_field};
                    }
                    if ($keyed) {
                        $res_records[$record->{$keyed}] = $record;
                    } else {
                        $res_records[] = $record;
                    }
                });

                if (isset($params['$expand'])) {
                    foreach ($expanded_fields as $expanded_field => $selected_sub_field_names) {
                        $field_keys = ($expanded_field_values[$expanded_field]);
                        //print_r($expanded_field_values);
                        $expanded_entity_intenal_name = salesforce_settings_provider__get_entity_field_internal_lookup_name($entity_name, $expanded_field);
                        //print_r($expanded_field.' '.$expanded_entity_intenal_name);
                        $relations = salesforce_settings_provider__get_entity_items_by_ids($expanded_entity_intenal_name, $field_keys, $selected_sub_field_names, $token_response, 'Id');

                        foreach ($res->records as &$record) {
                            $record->{$expanded_field} = $relations[$record->{$expanded_field}];
                        }
                    }
                }

                if ($post_process) {
                    $post_process($res->records, $expanded_field_values);
                }

                return $res_records;
            } else {
                return FALSE;
            }
        } else {
            return FALSE;
        }
    } catch (Exception $exp) {
        return FALSE;
    }
}

/**
 * Returns records of $entity_name that have the specified $ids.
 * @param type $entity_name
 * @param array $ids
 * @param array $select
 * @param stdClass $token_response
 * @param callable $callback
 * @return array
 * @throws Exception
 */
function salesforce_settings_provider__get_entity_items_by_ids($entity_name, array $ids = [], array $select = [], stdClass &$token_response = NULL, $key_field = NULL, array $notable_fields = [], callable $callback = NULL) {
    $records = [];
    $params = [
        '$select' => $select
    ];

    $params['$expand'] = isset($params['$expand']) ? $params['$expand'] : [];
    $params['$expand'] = array_merge($params['$expand'], $notable_fields);
    $id_chunks = array_chunk($ids, 50);

    foreach ($id_chunks as $id_chunk) {
        $params['$filter'] = 'Id IN (\'' . implode('\',\'', $id_chunk) . '\')';
        $r = salesforce_settings_provider__get_salesforce_entity_items($entity_name, $params, $token_response, $key_field, [], $callback);
        $records = array_merge($records, $r);
    }
    return $records;
}

/**
 * Returns records of $entity_name that have the specified $ids.
 * @param type $entity_name
 * @param array $ids
 * @param array $select
 * @param stdClass $token_response
 * @param callable $callback
 * @return array
 * @throws Exception
 */
function salesforce_settings_provider__get_entity_items_by_field_values($entity_name, $field_name, array $ids = [], array $select = [], stdClass &$token_response = NULL, $key_field = NULL, array $notable_fields = [], callable $callback = NULL) {
    $records = [];
    $params = [
        '$select' => $select
    ];

    $params['$expand'] = isset($params['$expand']) ? $params['$expand'] : [];
    $params['$expand'] = array_merge($params['$expand'], $notable_fields);
    $id_chunks = array_chunk($ids, 50);

    $field_name = salesforce_settings_provider__get_entity_field_internal_name($entity_name, $field_name);
    foreach ($id_chunks as $id_chunk) {
        $params['$filter'] = $field_name . ' IN (\'' . implode('\',\'', $id_chunk) . '\')';

        $r = salesforce_settings_provider__get_salesforce_entity_items($entity_name, $params, $token_response, $key_field, [], $callback);
        $records = array_merge($records, $r);
    }
    return $records;
}
