<?php

$module_path = drupal_get_path('module', 'settings_provider');
$middleware_driver_path = str_replace('/', DIRECTORY_SEPARATOR, $module_path . '/');
include_once str_replace('/', DIRECTORY_SEPARATOR, $middleware_driver_path . '/MiddlewareConnectionDriver.php');

use com\mainone\middleware\MiddlewareConnectionDriver;

spl_autoload_register(function ($class_name) use ($middleware_driver_path) {
    $last = strrpos('\\', $class_name);
    $class_name = $last > 0 ? substr($class_name, $last + 1) : $class_name;
    $file = $middleware_driver_path . "{$class_name}.php";
    return (file_exists($file) ? require_once $file : false);
});

function mware_connection_driver__get_driver($driver_name)
{
    $data = [];
    drupal_alter(['connection_driver', 'connection_driver_' . $driver_name], $data);
    
    return isset($data[$driver_name])?$data[$driver_name]: false;
}

/**
 * Implement hook_menu().
 */
function settings_provider_menu()
{
    $items = array();

    $items['admin/config/administration/settings_provider'] = array(
        'title' => 'Service connection settings',
        'description' => 'Use this page to provide settings for the Middleware application',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('settings_provider_admin'),
        'access arguments' => array('settings_provider administer settings'),
        'file path' => drupal_get_path('module', 'settings_provider') . '/forms',
        'file' => 'admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );

    // Link to cache update cron
    $items['settings-provider/update-cache'] = [
        'page callback' => 'settings_provider__update_cache'
        , 'file' => 'crons/cron.update-cache.inc'
        , 'page arguments' => ['internal']
        , 'access arguments' => ['access content']
        , 'type' => MENU_CALLBACK
    ];

    return $items;
}

/**
 * Implements hook_permission
 * @return array
 */
function settings_provider_permission()
{
    $permission = [
        'settings_provider administer settings' => [
            'title' => t('Administer settings'),
            'description' => t('Manage Middleware and it\'s dependencies\' settings.'),
        ],
    ];
    return $permission;
}

/**
 * Implements hook_library
 * @return array
 */
function settings_provider_library()
{
    $libraries = array();

    return $libraries;
}

/**
 * Implements hook_ctools_plugin_api
 * @param type $owner
 * @param type $api
 * @return type
 */
function settings_provider_ctools_plugin_api($owner, $api)
{
    if ($owner == 'services' && $api == 'services') {
        return array(
            'version' => 3,
            'file' => 'endpoints.inc', // Optional parameter to indicate the file name to load.
            'path' => drupal_get_path('module', 'settings_provider'), // If specifying the file key, path is required.
        );
    }
}

/**
 * Processes a URI rquest.
 * @param string $url
 * @param array $settings
 */
function settings_provider_http_request($url, $settings = array())
{

    $request = new \cURL\Request($url);
    $request->getOptions()
            ->set(CURLOPT_TIMEOUT, 10)->set(CURLOPT_RETURNTRANSFER, true);

    if (isset($settings['options'])) {
        $default = $settings['options'];
        foreach ($default as $key => $value) {
            $request->getOptions()->set($key, $value);
        }
    }

    //Add the listener
    $request->addListener('complete', $settings['callback']);

    while ($request->socketPerform()) {
        $request->socketSelect();
    }
}

/**
 * Processes a URI rquest.
 * @param string $url
 * @param array $settings
 */
function settings_provider_blocking_http_request($url, $settings = array())
{

    $request = new \cURL\Request($url);
    $request->getOptions()
            ->set(CURLOPT_TIMEOUT, 10)
            ->set(CURLOPT_RETURNTRANSFER, true);

    // Set other request options
    if (isset($settings['options'])) {
        $default = $settings['options'];
        foreach ($default as $key => $value) {
            $request->getOptions()->set($key, $value);
        }
    }

    $response = $request->send();
    return $response;
}

function settings_provider__format_cached_definition($from, $to, callable $entitiesSource)
{
    $key = "{$from}|{$to}";
    $return = [$key => []];

    if ($to != $from) {
        $entities = $entitiesSource();
        foreach ($entities as $entity_name => $entity) {
            if (isset($entity['cache_to']) && $entity['cache_to'] == $to) {
                //TODO: Ensure that values that were ommitted are populated.
                $fields = &$entity['fields'];
                $name = strtolower("{$from}__{$entity['internal_name']}");
                $entity['original_internal_name'] = $entity['internal_name'];
                $entity['original_display_name'] = $entity_name;
                $entity['internal_name'] = $name;
                unset($entity['cache']);
                unset($entity['cache_to']);

                // Ensure that all references to self a properly sorted out in lookup fields
                foreach ($fields as &$field) {
                    if (isset($field['relationship'])) {
                        if (!isset($field['relationship']['remote_driver'])) {
                            $field['relationship']['remote_driver'] = $from;
                        }
                    }
                }

                $return[$key][$name] = $entity;
            }
        }
    }

    return $return;
}


function settings_provider_cron(){
    global $base_url;

    $tokenOption = [
        CURLOPT_SSLVERSION => CURL_SSLVERSION_TLSv1_2
        , CURLOPT_PROTOCOLS => CURLPROTO_HTTPS
        , CURLOPT_SSL_VERIFYPEER => FALSE
        , CURLOPT_SSL_VERIFYHOST => 0
        , CURLOPT_FOLLOWLOCATION => TRUE
        , CURLOPT_HTTPPROXYTUNNEL => TRUE
        , CURLOPT_VERBOSE => TRUE
    ];

    if(variable_get('MWARE_ROOT_CONNECTION_DRIVER__SYNCH_CACHE', FALSE)){
        mware_http_request("{$base_url}/settings-provider/update-cache", ['options' => $tokenOption, 'callback' => function($event){
                
        }]);
    }
}